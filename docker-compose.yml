version: "3.7"
name: dagster-docker

services:
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  docker_postgresql:
    image: postgres:13
    restart: always
    container_name: docker_postgresql
    ports:
      - '5433:5432' #host:container
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "postgres_db"
    volumes:
      - dagsterPostgres:/var/lib/postgresql/data
    networks:
      - docker_network

  # This service runs the gRPC server that loads your user code, in both webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by webserver.
  docker_user_code:
    build:
      context: .
      dockerfile: ./docker/user_code/Dockerfile
    container_name: docker_user_code
    image: docker_user_code_image
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: "postgres"
      DAGSTER_POSTGRES_PASSWORD: "postgres"
      DAGSTER_POSTGRES_DB: "postgres_db"
      DAGSTER_CURRENT_IMAGE: "docker_user_code_image"
      pwd: ${DATA_WAREHOUSE_POSTGRES_PASSWORD:-postgres}
      uid:  ${DATA_WAREHOUSE_POSTGRES_USER:-postgres}
      server: data_warehouse_postgres
      db: ${DATA_WAREHOUSE_POSTGRES_DBNAME:-energy_database}
      port: 5432
      schema: raw
      MASTR_DOWNLOAD_DATE: ${MASTR_DOWNLOAD_DATE:-today} 
      DBT_PROFILE_FOLDER: prod
      DAGSTER_HOME: /opt/dagster/dagster_home
      IS_DEVELOP_MODE: False
    networks:
      - docker_network
    depends_on:
      - docker_postgresql
    volumes:
      - .:/opt/dagster/app
      - /var/run/docker.sock:/var/run/docker.sock # to be able to run docker
      - dagsterHomeData:/opt/dagster/dagster_home/data # have a shared volume that is also used by citygml container

  # This service runs docker-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  docker_webserver:
    build:
      context: .
      dockerfile: ./docker/dagster/Dockerfile
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: docker_webserver
    restart: always
    expose:
      - "3000"
    ports:
      - ${DAGSTER_WEBSERVER_PORT:-3000}:3000
    environment:
      DAGSTER_POSTGRES_USER: "postgres"
      DAGSTER_POSTGRES_PASSWORD: "postgres"
      DAGSTER_POSTGRES_DB: "postgres_db"
    volumes: # Make docker client accessible so we can terminate containers from webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - docker_network
    depends_on:
      - docker_postgresql
      - docker_user_code

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  docker_daemon:
    build:
      context: .
      dockerfile: ./docker/dagster/Dockerfile
    entrypoint:
      - dagster-daemon
      - run
    container_name: docker_daemon
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: "postgres"
      DAGSTER_POSTGRES_PASSWORD: "postgres"
      DAGSTER_POSTGRES_DB: "postgres_db"
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock # Make docker client accessible so we can launch containers using host docker
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - docker_network
    depends_on:
      - docker_postgresql
      - docker_user_code

  data_warehouse_postgres:
    image: postgis/postgis:15-3.3
    container_name: data_warehouse_postgres
    restart: always
    ports:
      - ${DATA_WAREHOUSE_POSTGRES_PORT:-5510}:5432 #host:container
    environment:
      POSTGRES_DB: ${DATA_WAREHOUSE_POSTGRES_DBNAME:-energy_database}
      POSTGRES_USER: ${DATA_WAREHOUSE_POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${DATA_WAREHOUSE_POSTGRES_PASSWORD:-postgres}
    volumes:
      - dataWarehousePostgresVolume:/var/lib/postgresql/data
      - ./docker/init_energy_database.sql:/docker-entrypoint-initdb.d/create_schema.sql
    networks:
      - docker_network
  
  geoserver:
    image: docker.osgeo.org/geoserver:2.23.1
    container_name: geoserver
    restart: always
    ports:
      - ${GEOSERVER_PORT:-8002}:8080
    volumes:
      - "geoserverData:/opt/geoserver_data"
    environment:
      SKIP_DEMO_DATA: true
      ROOT_WEBAPP_REDIRECT: true
    networks:
      - docker_network

networks:
  docker_network:
    driver: bridge
    name: docker_network

volumes:
  dagsterPostgres:
  dataWarehousePostgresVolume:
  dagsterHomeData:
  geoserverData: